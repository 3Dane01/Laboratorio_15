@page "/IngresoAves"
<h1>Ingrese de Datos de Aves</h1>

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager

<EditForm Model="@animalAves" OnValidSubmit="@GuardarAves">

    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="NombreAnimal">Nombre del Animal: </label>
        <InputText id="NombreAnimal" @bind-Value="animalAves.NombreAnimal" class="form-control" />
        <ValidationMessage For="() => animalAves.NombreAnimal" />
    </div>
    <div>
        <label for="Especie">Especie: </label>
        <InputText id="Especie" @bind-Value="animalAves.Especie" class="form-control" />
        <ValidationMessage For="() => animalAves.Especie" />
    </div>
    <div>
        <label for="TipoAlimentacion">Tipo de Alimentacion: </label>
        <InputText id="TipoAlimentacion" @bind-Value="animalAves.TipoAlimentacion" class="form-control" />
        <ValidationMessage For="() => animalAves.TipoAlimentacion" />
    </div>
    <div>
        <label for="TiempoMaximaVida">Tiempo Maxima de Vida: </label>
        <InputText id="TiempoMaximaVida" @bind-Value="animalAves.TiempoMaximaVida" class="form-control" />
        <ValidationMessage For="() => animalAves.TiempoMaximaVida" />
    </div>

    <div>
        <label for="Vuela">El animal vuela: </label>
        <InputText id="Vuela" @bind-Value="animalAves.Vuela" class="form-control" />
        <ValidationMessage For="() => animalAves.Vuela" />
    </div>

    <div>
        <label for="PeriodoIncubacion">Periodo de Incubacion: </label>
        <InputText id="PeriodoIncubacion" @bind-Value="animalAves.PeriodoIncubacion" class="form-control" />
        <ValidationMessage For="() => animalAves.PeriodoIncubacion" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-danger">Guardar</button>
    </div>
</EditForm>


@if (listaAnimalesAves != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre Animal</th>
                <th>Especie</th>
                <th>Tipo de Alimentacion</th>
                <th>Tiempo Maximo de Vida</th>
                <th>Vuela</th>
                <th>Periodo de Incubacion</th>
                <th>Editar</th>
                <th>Borrar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var CualquierAnimal in listaAnimalesAves)
            {
                <tr>
                    <td>@CualquierAnimal.NombreAnimal</td>
                    <td>@CualquierAnimal.Especie</td>
                    <td>@CualquierAnimal.TipoAlimentacion</td>
                    <td>@CualquierAnimal.TiempoMaximaVida</td>
                    <td>@CualquierAnimal.Vuela</td>
                    <td>@CualquierAnimal.PeriodoIncubacion</td>
                    <td><button class="btn btn-warning" @onclick="@(() => NavigationManager.NavigateTo($"/AvesEditar/{CualquierAnimal.NombreAnimal}"))">editar</button></td>
                    <td><button class="btn btn-danger" @onclick="@(() => Borrar(CualquierAnimal.NombreAnimal))">Borrar</button></td>

                </tr>
            }
        </tbody>
    </table>
}

@code {
    ClaseAnimalAves animalAves = new ClaseAnimalAves();
    List<ClaseAnimalAves> listaAnimalesAves = new List<ClaseAnimalAves>();
    protected async Task GuardarAves()
    {
        listaAnimalesAves.Add(animalAves);
        animalAves = new ClaseAnimalAves();

        await localStorage.SetItemAsync("listaAnimales", listaAnimalesAves);
    }
    protected override async Task OnInitializedAsync()
    {
        listaAnimalesAves = await localStorage.GetItemAsync<List<ClaseAnimalAves>>("listaAnimalesAves");

        if (listaAnimalesAves == null)
        {
            listaAnimalesAves  = new List<ClaseAnimalAves>();
        }

    }
    protected async Task Borrar(string nombre)
    {
        listaAnimalesAves.Remove(listaAnimalesAves.First(c => c.NombreAnimal == nombre));
        await localStorage.SetItemAsync("listaAnimales", listaAnimalesAves);
    }
    
}
